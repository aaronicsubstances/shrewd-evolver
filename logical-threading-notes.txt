-demonstrate logical thread of control for async/await syntax.
 - createlogicalthreadid - call assignlogicalthreadid with autogenerated
 - assignlogicalthreadid(id or null) - call _wraplogicalthreadmemberSPECIAL with id. skip _wraplogicalthreadmember call if id is null.
 - unassignlogicalthreadid() - assign null to current thread local and return void.
 - currentlogicalthreadid
 - _wraplogicalthreadmember(task):
  - create taskcompletionsource. ensure its continuations will execute synchronously.
  - call task.continuewith()
  - set up try finally block
  - set threadlocal currentlogicalthreadid to currentlogicalthreadid or SPECIAL's id.
  - complete taskcompletionsource with whatever task's status is.
  - inside finally, clear threadlocal effects.
  - RETURN taskcompletionsource.task to caller
* for nodejs and dynamic languages which make it easier, can rather return a proxy whose then/catch/finally call the delegate's counterparts in a try finally block like above.
-demonstrate automatic maintenance log insertion using log position id and current logical thread id, as counterpart to white-box testing logs but for different purpose. those two props add quite helpful information for maintainers. Could actually be in the same format as testing logs, but perhaps with a different logger or level so they can be turned off independently of test logs.
-demonstrate inclusion of logical position inside exception messages as useful for testing exceptional cases, and for showing exception location even if stack trace line numbers are optimized out for release builds.
