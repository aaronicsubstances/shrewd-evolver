# Transaction Coordination

needed by microservices and process group facade for
 - local and distributed ACID transactions
 - using ORM with caching over a single database
 - controlling access controls in scenario in which every subsystem is assigned tables it can write to, and can read from in a single database.
 - communication among subsystems involving 3 or more. Here transaction coordinator provides the benefit of enforcing subsystem boundaries.
   (an endpoint can easily ensure that only particular subsystems can call it).
 - could host the GUI for desktop applications

focus on database and subsystem communication. however the term "transaction" applies outside of ACID transactions to mean more of batching multiple operations together.

requires some controls if microservices are being managed by potentially hostile development teams.

In general, subsystem calls transaction coordinator to carry out functionality given functionality id
- provides request body, and receives response.
- uses api based on http for example (later could use scalable ipc).
Transaction coordinator then has a chance to verify that calling subystem has the right to invoke funtionality id, before allowing it to proceed.
Some transactions may require transaction coordinator to call other subsystems to retrieve some information or perform some action, so in that 
case the subsystem must expose an endpoint to receive such calls.
